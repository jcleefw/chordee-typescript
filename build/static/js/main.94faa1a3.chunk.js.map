{"version":3,"sources":["interfaces/tuning.ts","components/Header.tsx","modules/fretboard.ts","components/Fretboard/BoardString.tsx","components/Fretboard/NutGraphicString.tsx","components/Fretboard/ViewPort.tsx","components/Fretboard/SvgHeader.tsx","components/Fretboard/Board.tsx","components/Fretboard/BoardPosition.tsx","components/Fretboard/StringTuningWrapper.tsx","interfaces/enums.ts","components/Container.tsx","pages/FretboardPage.tsx","pages/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["musicNotes","Header","className","href","htmlFor","to","notesArray","stringHeight","nrOfStrings","stringCenter","str","stringOffset","stringifyNote","note","octave","fretLine","nrOfFrets","frt","top","bottom","fretLineBounds","x","key","x1","x2","y1","y2","BoardString","times","y","stringLine","range","map","NutGraphicStrings","width","height","fill","ViewPort","offset","children","SvgHeader","xmlns","version","stroke","strokeWidth","shapeRendering","style","overflow","Board","boardHeight","FretsWrapper","styled","div","FretsRow","Fret","FretBackground","span","BoardPosition","tuning","showOctave","reverseTuning","reverse","stringNotesByRow","row","tuningIndex","rootNote","noFrets","startIndex","indexOf","toLowerCase","finalArray","octaveCount","push","notesOnStringArray","length","fretNotes","index","fretString","textAlign","data-note","toUpperCase","fretboardHeight","TuningDivWrapper","TuningNotes","StringTuningWrapper","stringArray","tuningNotes","notes","PageContainer","openE","e","a","d","g","b","large","FretboardPage","Scale","get","NutGraphicString","HomePage","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94faa1a3.chunk.js","sourcesContent":["export enum musicNotes {\n  c = 'C',\n  d = 'D',\n  e = 'E',\n  f = 'F',\n  g = 'G',\n  a = 'A',\n  b = 'B',\n}\n\nexport const notesArray = [\n  'a',\n  'a#',\n  'b',\n  'c',\n  'c#',\n  'd',\n  'd#',\n  'e',\n  'f',\n  'f#',\n  'g',\n  'g#',\n]\n\nexport interface TuningShape {\n  note: string\n  octave: number\n  sharp?: boolean\n  flat?: boolean\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n  return (\n    <nav className=\"border fixed split-nav row\">\n      <div className=\"nav-brand\">\n        <h3>\n          <a href=\"#\">Chordee</a>\n        </h3>\n      </div>\n      <div className=\"collapsible\">\n        <label htmlFor=\"collapsible1\">\n          <div className=\"bar1\"></div>\n          <div className=\"bar2\"></div>\n          <div className=\"bar3\"></div>\n        </label>\n      </div>\n\n      <div className=\"collapsible-body\">\n        <ul className=\"inline\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/fretboard\">Fretboard</Link>\n          </li>\n          <li>\n            <Link to=\"/metronome-app\">Metronome App</Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header\n","/* eslint-disable import/prefer-default-export */\nimport { sum, isNil, times } from 'ramda'\nimport { TuningShape, notesArray } from '../interfaces/tuning'\n\nexport const fretWidth = (nrFrets: number) => (pos: number) =>\n  ((2 ** (1 / nrFrets) - 1) / 2 ** ((pos + 1) / nrFrets)) * 100 * 2\n\nexport const fretOffset = (nrFrets: any) => (pos: any) => {\n  // (1 - (1 / (2 ** (pos / nrFrets)))) * 100 * 2\n  return sum(times(fretWidth(nrFrets), pos))\n}\n\nexport const stringHeight = (nrOfStrings: number) => 100 / nrOfStrings\n\nexport const stringOffset = (nrOfStrings: any) => (str: number) =>\n  str * stringHeight(nrOfStrings)\n\nexport const stringCenter = (nrOfStrings: any) => (str: any) =>\n  stringOffset(nrOfStrings)(str) + stringHeight(nrOfStrings) / 2\n\nexport const ensureNoteObjects = (noteProps: any[]) =>\n  noteProps.map((noteProp: { note: any; status: any; label: any }) =>\n    typeof noteProp === 'string'\n      ? {\n          note: noteProp,\n          status: 'selected',\n          label: noteProp,\n        }\n      : {\n          note: noteProp.note,\n          status: noteProp.status || 'selected',\n          label: noteProp.label || noteProp.note,\n        }\n  )\n\nexport const ensureLocObjects = (locProps: any[]) =>\n  locProps.map((locProp: { str: any; loc: any; status: any; label: any }) =>\n    !isNil(locProp.str)\n      ? {\n          loc: locProp,\n          status: 'selected',\n          label: '',\n        }\n      : {\n          loc: locProp.loc,\n          status: locProp.status || 'selected',\n          label: locProp.label || '',\n        }\n  )\n\nexport const notesOnStringArray = (rootNote: TuningShape, noFrets: number) => {\n  const rootNoteIndex = notesArray.indexOf(rootNote.note.toLowerCase())\n  let startIndex = rootNoteIndex + 1\n  let finalArray: TuningShape[] = []\n  let octaveCount = rootNote.octave\n\n  times(() => {\n    finalArray.push({ note: notesArray[startIndex], octave: octaveCount })\n    if (startIndex < 12 - 1) {\n      startIndex += 1\n    } else {\n      startIndex = 0\n      octaveCount += 1\n    }\n  }, noFrets)\n  return finalArray\n}\n\nexport const stringifyNote = (note: TuningShape) => {\n  return `${note.note}${note.octave}`\n}\n","import React, { FC } from 'react'\nimport { times, range } from 'ramda'\nimport { stringCenter } from '../../modules/fretboard'\n\nconst stringLine = (nrOfStrings: number) => (str: any) => {\n  const y = stringCenter(nrOfStrings)(str)\n  return (\n    <line\n      className={`str str-${str}`}\n      key={`str-${str}`}\n      x1=\"0%\"\n      x2=\"100%\"\n      y1={`${y}%`}\n      y2={`${y}%`}\n    />\n  )\n}\n\nconst fretLineBounds = (nrOfStrings: number) => ({\n  top: stringCenter(nrOfStrings)(0),\n  bottom: stringCenter(nrOfStrings)(nrOfStrings - 1),\n})\nconst fretLine = (nrOfFrets: number, nrOfStrings: number) => (frt: any) => {\n  const { top, bottom } = fretLineBounds(nrOfStrings)\n  const x = (100 / nrOfFrets) * frt\n\n  return (\n    <line\n      className={`fret fret-${frt}`}\n      key={`fret-${frt}`}\n      x1={`${x}%`}\n      x2={`${x}%`}\n      y1={`${top}%`}\n      y2={`${bottom}%`}\n    />\n  )\n}\n\ninterface Props {\n  nrOfStrings: number\n  nrOfFrets: number\n}\n\nconst BoardString: FC<Props> = ({ nrOfStrings, nrOfFrets }) => (\n  <g>\n    {times(stringLine(nrOfStrings), nrOfStrings)}\n    {range(1, nrOfFrets).map(fretLine(nrOfFrets, nrOfStrings))}\n  </g>\n)\n\nexport default BoardString\n","import React, { ReactElement } from 'react'\nimport { stringCenter } from '../../modules/fretboard'\n\nconst NutGraphicStrings = ({ nrOfStrings }: Props): ReactElement => {\n  const top = stringCenter(nrOfStrings)(0)\n  const bottom = stringCenter(nrOfStrings)(nrOfStrings - 1) - top\n\n  return (\n    <rect x=\"0\" y={`${top}%`} width=\"100%\" height={`${bottom}%`} fill=\"black\" />\n  )\n}\n\ninterface Props {\n  nrOfStrings: number\n}\n\nexport default NutGraphicStrings\n","import React, { FC } from 'react'\n\ninterface Props {\n  width?: number\n  offset?: number\n}\n\nconst ViewPort: FC<Props> = ({ width, offset, children }) => (\n  <svg width={`${width}%`} height=\"100%\" x={`${offset}%`} y=\"0\">\n    {children}\n  </svg>\n)\n\nexport default ViewPort\n","import React, { FC } from 'react'\n\nconst SvgHeader: FC = ({ children }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    version=\"1.1\"\n    width=\"100%\"\n    height=\"100%\"\n    stroke=\"black\"\n    strokeWidth=\"1\"\n    fill=\"white\"\n    shapeRendering=\"geometricPrecision\"\n    style={{ overflow: 'visible' }}\n  >\n    {children}\n  </svg>\n)\n\nexport default SvgHeader\n","import React, { FC } from 'react'\n\nconst Board: FC<{ boardHeight: number }> = ({ boardHeight, children }) => (\n  <div className=\"board\" style={{ height: `${boardHeight}px` }}>\n    {children}\n  </div>\n)\n\nexport default Board\n","import React, { FC } from 'react'\nimport { TuningShape } from '../../interfaces/tuning'\nimport { notesOnStringArray, stringifyNote } from '../../modules/fretboard'\nimport styled from 'styled-components'\nimport { reverse } from 'ramda'\nimport { fretboardHeight } from 'interfaces/enums'\n\ninterface Props {\n  tuning: TuningShape[]\n  showOctave?: boolean\n  boardHeight: fretboardHeight\n}\n\nconst FretsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst FretsRow = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Fret = styled.div`\n  position: relative;\n  font-size: 0.8rem;\n`\n\nconst FretBackground = styled.span`\n  background: white;\n  padding: 0 5px;\n`\n\nconst BoardPosition: FC<Props> = ({\n  tuning,\n  showOctave = false,\n  boardHeight,\n}) => {\n  const reverseTuning = reverse(tuning)\n  const stringNotesByRow = reverseTuning.map((row, tuningIndex) => {\n    const notesArray = notesOnStringArray(reverseTuning[tuningIndex], 15)\n    const width = 100 / tuning.length\n    const y = boardHeight / 6\n    const fretNotes = notesArray.map((note, index) => {\n      const fretString = showOctave ? stringifyNote(note) : note.note\n\n      return (\n        <Fret\n          className={`fret-note`}\n          style={{ width: `${width}%`, textAlign: 'center' }}\n          key={`note-${tuningIndex}-${index}`}\n          data-note={stringifyNote(note)}\n        >\n          <FretBackground>{fretString.toUpperCase()}</FretBackground>\n        </Fret>\n      )\n    })\n    return (\n      <FretsRow\n        className=\"fret-row\"\n        style={{ height: `${y}px` }}\n        key={`row-${tuningIndex}`}\n      >\n        {fretNotes}\n      </FretsRow>\n    )\n  })\n\n  return (\n    <foreignObject width=\"100%\" height=\"100%\">\n      <FretsWrapper>{stringNotesByRow}</FretsWrapper>\n    </foreignObject>\n  )\n}\n\nexport default BoardPosition\n","import styled from 'styled-components'\nimport React, { FC } from 'react'\nimport { TuningShape } from '../../interfaces/tuning'\nimport { reverse } from 'ramda'\n\nconst TuningDivWrapper = styled.div`\n  margin-top: 4px;\n`\nconst TuningNotes = styled.div`\n  font-size: 0.9rem;\n  color: green;\n  font-family: 'Patrick Hand SC';\n  font-weight: bold;\n`\ninterface Props {\n  tuning: Array<TuningShape>\n  boardHeight: number\n}\n\nconst tuningNotes = (tuning: TuningShape[]) => {\n  const stringArray = tuning.map(row =>\n    `${row.note}${row.octave}`.toUpperCase()\n  )\n  return reverse(stringArray)\n}\n\nconst StringTuningWrapper: FC<Props> = ({ tuning, boardHeight }) => {\n  const y = boardHeight / tuning.length\n  return (\n    <foreignObject width=\"100%\" height=\"100%\">\n      <TuningDivWrapper>\n        {tuningNotes(tuning).map((notes: string, index: number) => {\n          return (\n            <TuningNotes style={{ height: y }} key={index}>\n              {notes.toUpperCase()}\n            </TuningNotes>\n          )\n        })}\n      </TuningDivWrapper>\n    </foreignObject>\n  )\n}\n\nexport default StringTuningWrapper\n","export enum fretboardHeight {\n  small = 20,\n  medium = 25,\n  large = 30,\n  xlarge = 40,\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst PageContainer = styled.div`\n  margin-top: 50px;\n  background-color: white;\n`\n\nexport { PageContainer }\n","import React from 'react'\nimport { Scale } from '@tonaljs/tonal'\nimport BoardGraphicStrings from 'components/Fretboard/BoardString'\nimport styled from 'styled-components'\nimport NutGraphicStrings from 'components/Fretboard/NutGraphicString'\nimport ViewPort from 'components/Fretboard/ViewPort'\nimport SvgHeader from 'components/Fretboard/SvgHeader'\nimport Board from 'components/Fretboard/Board'\nimport { musicNotes, TuningShape } from 'interfaces/tuning'\nimport BoardPosition from 'components/Fretboard/BoardPosition'\nimport StringTuningWrapper from 'components/Fretboard/StringTuningWrapper'\nimport { fretboardHeight } from 'interfaces/enums'\nimport { PageContainer } from 'components/Container'\n\nconst NO_OF_FRETS = 15\nconst NO_OF_STRINGS = 6\n\nconst openE: Array<TuningShape> = [\n  { note: musicNotes.e, octave: 2 },\n  { note: musicNotes.a, octave: 2 },\n  { note: musicNotes.d, octave: 3 },\n  { note: musicNotes.g, octave: 3 },\n  { note: musicNotes.b, octave: 3 },\n  { note: musicNotes.e, octave: 4 },\n]\n\nconst boardHeight = NO_OF_STRINGS * fretboardHeight.large\n\nconst FretboardPage = () => {\n  return (\n    <PageContainer className=\"container container-lg container-xl\">\n      <div>{Scale.get('D major').notes}</div>\n      <Board boardHeight={boardHeight}>\n        <SvgHeader>\n          <ViewPort width={3} offset={0}>\n            <StringTuningWrapper tuning={openE} boardHeight={boardHeight} />\n          </ViewPort>\n          <ViewPort width={0.75} offset={3}>\n            <NutGraphicStrings nrOfStrings={NO_OF_STRINGS} />\n          </ViewPort>\n          <ViewPort width={95} offset={3.75}>\n            <BoardGraphicStrings\n              nrOfStrings={NO_OF_STRINGS}\n              nrOfFrets={NO_OF_FRETS}\n            />\n            <BoardPosition boardHeight={boardHeight} tuning={openE} />\n          </ViewPort>\n        </SvgHeader>\n      </Board>\n    </PageContainer>\n  )\n}\n\nexport default FretboardPage\n","import React from 'react'\nimport styled from 'styled-components'\nimport { PageContainer } from 'components/Container'\n\nconst HomePage = () => {\n  return (\n    <PageContainer>\n      <div>Hello</div>\n    </PageContainer>\n  )\n}\n\nexport default HomePage\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Header from './components/Header'\nimport FretboardPage from './pages/FretboardPage'\nimport HomePage from './pages/HomePage'\n\nconst App = () => {\n  return (\n    <div className=\"paper\">\n      <Router>\n        <Header />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/fretboard\">\n            <FretboardPage />\n          </Route>\n          {/* <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route> */}\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}