{"version":3,"sources":["interfaces/tuning.ts","components/Header.tsx","components/Fretboard/ViewPort.tsx","modules/fretboard.ts","components/Fretboard/StringTuningWrapper.tsx","components/Fretboard/NutGraphicString.tsx","components/Fretboard/SvgWrapper.tsx","components/Fretboard/Fret.tsx","components/Fretboard/FretRow.tsx","components/Fretboard/Board/BoardPosition.tsx","components/Fretboard/Board/BoardString.tsx","components/Fretboard/Board/index.tsx","components/Fretboard/FretBoard.tsx","components/Container.tsx","interfaces/enums.ts","data/alternateTunings.ts","modules/tonalHelper.ts","pages/FretboardPage/PageHeader.tsx","pages/FretboardPage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["musicNotes","Header","className","href","id","type","name","htmlFor","to","ViewPort","width","offset","children","height","x","y","HighlightStatus","notesArray","stringHeight","nrOfStrings","stringCenter","str","stringOffset","populateHighlightStatus","scale","currentNote","indexOfNote","indexOf","toUpperCase","root","notesOnStringArray","props","rootNote","noFrets","tonalKey","rootNoteIndex","stringifyNote","tonalScale","convertedScale","startIndex","octaveCount","octave","finalArray","times","push","note","highlight","addToArray","showOctave","sharp","flat","TuningDivWrapper","styled","div","TuningNotes","StringTuningWrapper","tuning","boardHeight","length","stringArray","map","row","reverse","tuningNotes","notes","index","style","key","NutGraphicStrings","top","bottom","fill","SvgWrapper","xmlns","version","stroke","strokeWidth","shapeRendering","overflow","Fret","FretBackground","span","fretMarking","fretString","cx","includes","data-note","FretsRow","noOfStrings","rowHeight","FretsWrapper","generateFretRow","_","stringIndex","fretNotes","generatFretNotes","FretRow","BoardPosition","reverseTuning","stringNotesByRow","fretLine","nrOfFrets","frt","fretLineBounds","x1","x2","y1","y2","BoardString","stringLine","range","noOfFrets","FretBoard","NutGraphicString","Board","fretboardHeight","PageContainer","alternateTunings","standard","tunings","E","A","D","G","B","dadgad","openC","C","openD","F","convertTonalScaleIfNeeded","firstNoteIndex","splitArray","split","splice","join","searchIndex","Container","PageHeader","setTuning","setKey","tuningOptions","Object","keys","value","label","generateOptions","musicKey","options","onChange","e","onTuningChange","defaultValue","Key","majorKey","onKeyChange","large","ScalesDisplay","FretboardPage","useState","setTonalKey","isEmpty","item","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98965351.chunk.js","sourcesContent":["export enum musicNotes {\n  C = 'C',\n  D = 'D',\n  E = 'E',\n  F = 'F',\n  G = 'G',\n  A = 'A',\n  B = 'B',\n}\n\nexport const notesArray = [\n  'A',\n  'A#',\n  'B',\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n]\n\nexport enum HighlightStatus {\n  root = 'root',\n  scale = 'scale',\n}\n\nexport interface TuningShape {\n  note: string\n  octave: number\n  sharp?: boolean\n  flat?: boolean\n  highlight?: HighlightStatus | null\n}\n\nexport interface AlternateTuningProps {\n  [x: string]: {\n    name: string\n    tunings: TuningShape[]\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n  return (\n    <nav className=\"border fixed split-nav\">\n      <div className=\"nav-brand\">\n        <h3>\n          <a href=\"/\">Chordee</a>\n        </h3>\n      </div>\n      <div className=\"collapsible\">\n        <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible1\" />\n        <label htmlFor=\"collapsible1\">\n          <div className=\"bar1\"></div>\n          <div className=\"bar2\"></div>\n          <div className=\"bar3\"></div>\n        </label>\n        <div className=\"collapsible-body\">\n          <ul className=\"inline\">\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/fretboard\">Fretboard</Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header\n","import React, { FC } from 'react'\n\ninterface Props {\n  width?: number\n  offset?: number\n}\n\nconst ViewPort: FC<Props> = ({ width, offset, children }) => (\n  <svg width={`${width}%`} height=\"100%\" x={`${offset}%`} y=\"0\">\n    {children}\n  </svg>\n)\n\nexport default ViewPort\n","/* eslint-disable import/prefer-default-export */\nimport { sum, times } from 'ramda'\nimport { TuningShape, notesArray, HighlightStatus } from '../interfaces/tuning'\nimport { TonalKey } from 'interfaces/tonal'\n\nexport const fretWidth = (nrFrets: number) => (pos: number) =>\n  ((2 ** (1 / nrFrets) - 1) / 2 ** ((pos + 1) / nrFrets)) * 100 * 2\n\nexport const fretOffset = (nrFrets: any) => (pos: any) => {\n  // (1 - (1 / (2 ** (pos / nrFrets)))) * 100 * 2\n  return sum(times(fretWidth(nrFrets), pos))\n}\n\nexport const stringHeight = (nrOfStrings: number) => 100 / nrOfStrings\n\nexport const stringOffset = (nrOfStrings: any) => (str: number) =>\n  str * stringHeight(nrOfStrings)\n\nexport const stringCenter = (nrOfStrings: any) => (str: any) =>\n  stringOffset(nrOfStrings)(str) + stringHeight(nrOfStrings) / 2\n\nexport const populateHighlightStatus = (\n  scale: Array<string>,\n  currentNote: string\n) => {\n  const indexOfNote = scale?.indexOf(currentNote.toUpperCase())\n  if (indexOfNote === 0) {\n    return HighlightStatus.root\n  } else if (indexOfNote > 0) {\n    return HighlightStatus.scale\n  } else {\n    return null\n  }\n}\n\nconst addToArray = (\n  startIndex: number,\n  octaveCount: number,\n  tonalScale: Array<string>\n) => {\n  const currentNote: string = notesArray[startIndex]\n\n  return {\n    note: currentNote,\n    octave: octaveCount,\n    highlight: populateHighlightStatus(tonalScale, currentNote),\n  }\n}\n\nexport const notesOnStringArray = (props: {\n  rootNote: TuningShape\n  noFrets: number\n  tonalKey?: TonalKey\n}) => {\n  const { rootNote, noFrets, tonalKey } = props\n  const rootNoteIndex = notesArray.indexOf(stringifyNote(rootNote))\n  const tonalScale = tonalKey?.convertedScale\n\n  let startIndex = rootNoteIndex + 1\n  let octaveCount = rootNote.octave\n  let finalArray: TuningShape[] = []\n\n  times(() => {\n    finalArray.push(addToArray(startIndex, octaveCount, tonalScale))\n    if (startIndex < 12 - 1) {\n      startIndex += 1\n    } else {\n      startIndex = 0\n      octaveCount += 1\n    }\n  }, noFrets)\n\n  return finalArray\n}\n\nexport const stringifyNote = (note: TuningShape, showOctave?: boolean) => {\n  return `${note.note}${note.sharp ? '#' : ''}${note.flat ? '♭' : ''}${\n    showOctave ? note.octave : ''\n  }`\n}\n","import styled from 'styled-components'\nimport React, { FC } from 'react'\nimport { TuningShape } from '../../interfaces/tuning'\nimport { reverse } from 'ramda'\nimport { stringifyNote } from '../../modules/fretboard'\n\nconst TuningDivWrapper = styled.div`\n  margin-top: 4px;\n`\nconst TuningNotes = styled.div`\n  font-size: 0.9rem;\n  color: green;\n  font-family: 'Patrick Hand SC';\n  font-weight: bold;\n`\ninterface Props {\n  tuning: Array<TuningShape>\n  boardHeight: number\n}\n\nconst tuningNotes = (tuning: TuningShape[]) => {\n  const stringArray = tuning.map(row => stringifyNote(row, true).toUpperCase())\n  return reverse(stringArray)\n}\n\nconst StringTuningWrapper: FC<Props> = ({ tuning, boardHeight }) => {\n  const y = boardHeight / tuning.length\n  return (\n    <foreignObject width=\"100%\" height=\"100%\">\n      <TuningDivWrapper>\n        {tuningNotes(tuning).map((notes: string, index: number) => {\n          return (\n            <TuningNotes style={{ height: y }} key={index}>\n              {notes.toUpperCase()}\n            </TuningNotes>\n          )\n        })}\n      </TuningDivWrapper>\n    </foreignObject>\n  )\n}\n\nexport default StringTuningWrapper\n","import React, { ReactElement } from 'react'\nimport { stringCenter } from '../../modules/fretboard'\n\nconst NutGraphicStrings = ({ nrOfStrings }: Props): ReactElement => {\n  const top = stringCenter(nrOfStrings)(0)\n  const bottom = stringCenter(nrOfStrings)(nrOfStrings - 1) - top\n\n  return (\n    <rect x=\"0\" y={`${top}%`} width=\"100%\" height={`${bottom}%`} fill=\"black\" />\n  )\n}\n\ninterface Props {\n  nrOfStrings: number\n}\n\nexport default NutGraphicStrings\n","import React, { FC } from 'react'\n\nconst SvgWrapper: FC = ({ children }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    version=\"1.1\"\n    width=\"100%\"\n    height=\"100%\"\n    stroke=\"black\"\n    strokeWidth=\"1\"\n    fill=\"white\"\n    shapeRendering=\"geometricPrecision\"\n    style={{ overflow: 'visible' }}\n  >\n    {children}\n  </svg>\n)\n\nexport default SvgWrapper\n","import React, { ReactElement } from 'react'\nimport { TuningShape } from '../../interfaces/tuning'\nimport { stringifyNote } from '../../modules/fretboard'\nimport styled from 'styled-components'\nimport cx from 'classnames'\n\ninterface Props {\n  width: number\n  note: TuningShape\n  showOctave: boolean\n  index: number\n}\n\ntype FretProp = {\n  highlight: any\n}\n\nconst Fret = styled.div<FretProp>`\n  position: relative;\n  font-size: 0.8rem;\n  display: flex;\n  justify-content: center;\n  background: inherit;\n\n  &.--highlight {\n    span {\n      border-radius: 1.5rem;\n      width: 1.5rem;\n      height: 1.5rem;\n      display: flex;\n      justify-content: center;\n      padding-top: 8px;\n    }\n  }\n`\nconst FretBackground = styled.span`\n  background: white;\n  padding: 5px;\n  z-index: 6;\n`\nconst fretMarking = [3, 5, 7, 9, 12, 15, 17]\n\nexport default ({ width, note, showOctave, index }: Props): ReactElement => {\n  const fretString = stringifyNote(note, showOctave)\n\n  return (\n    <Fret\n      className={cx('fret-note', {\n        '--highlight': note.highlight,\n        '--root': note.highlight === 'root',\n        '--scale': note.highlight === 'scale',\n        '--fret-mark': fretMarking.includes(index + 1),\n      })}\n      style={{ width: `${width}%` }}\n      data-note={stringifyNote(note)}\n      highlight={note.highlight}\n    >\n      <FretBackground>{fretString.toUpperCase()}</FretBackground>\n    </Fret>\n  )\n}\n","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { fretboardHeight } from 'interfaces/enums'\n\ninterface Props {\n  boardHeight: fretboardHeight\n  children?: ReactElement[]\n  noOfStrings: number\n}\n\nconst FretsRow = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport default ({\n  noOfStrings,\n  boardHeight,\n  children,\n}: Props): ReactElement => {\n  const rowHeight = boardHeight / noOfStrings\n\n  return (\n    <FretsRow className=\"fret-row\" style={{ height: `${rowHeight}px` }}>\n      {children}\n    </FretsRow>\n  )\n}\n","import React, { FC } from 'react'\nimport { TuningShape } from '../../../interfaces/tuning'\nimport { notesOnStringArray } from '../../../modules/fretboard'\nimport styled from 'styled-components'\nimport { reverse } from 'ramda'\nimport { fretboardHeight } from 'interfaces/enums'\nimport Fret from '../Fret'\nimport FretRow from '../FretRow'\nimport { TonalKey } from 'interfaces/tonal'\n\ninterface Props {\n  tuning: TuningShape[]\n  showOctave?: boolean\n  boardHeight: fretboardHeight\n  noOfStrings: number\n  tonalKey?: TonalKey\n}\n\nconst FretsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst generatFretNotes = (\n  notesArray: TuningShape[],\n  width: number,\n  stringIndex: number,\n  showOctave: boolean\n) => {\n  return notesArray.map((note, index) => (\n    <Fret\n      width={width}\n      note={note}\n      key={`note-${stringIndex}-${index}`}\n      showOctave={showOctave}\n      index={index}\n    />\n  ))\n}\n\nconst generateFretRow = (\n  tuning: TuningShape[],\n  boardHeight: number,\n  showOctave: boolean,\n  noOfStrings: number,\n  tonalKey?: TonalKey\n) => {\n  return tuning.map((_, stringIndex) => {\n    const notesArray = notesOnStringArray({\n      rootNote: tuning[stringIndex],\n      noFrets: 15,\n      tonalKey: tonalKey,\n    })\n    const width = 100 / tuning.length\n    const fretNotes = generatFretNotes(\n      notesArray,\n      width,\n      stringIndex,\n      showOctave\n    )\n    return (\n      <FretRow\n        boardHeight={boardHeight}\n        noOfStrings={noOfStrings}\n        key={`row-${stringIndex}`}\n      >\n        {fretNotes}\n      </FretRow>\n    )\n  })\n}\n\nconst BoardPosition: FC<Props> = ({\n  tuning,\n  showOctave = false,\n  boardHeight,\n  noOfStrings,\n  tonalKey,\n}) => {\n  const reverseTuning = reverse(tuning)\n  const stringNotesByRow = generateFretRow(\n    reverseTuning,\n    boardHeight,\n    showOctave,\n    noOfStrings,\n    tonalKey\n  )\n\n  return (\n    <foreignObject width=\"100%\" height=\"100%\">\n      <FretsWrapper>{stringNotesByRow}</FretsWrapper>\n    </foreignObject>\n  )\n}\n\nexport default BoardPosition\n","import React, { FC } from 'react'\nimport { times, range } from 'ramda'\nimport { stringCenter } from 'modules/fretboard'\nimport cx from 'classnames'\n\nconst stringLine = (nrOfStrings: number) => (str: any) => {\n  const y = stringCenter(nrOfStrings)(str)\n  return (\n    <line\n      className={`str str-${str}`}\n      key={`str-${str}`}\n      x1=\"0%\"\n      x2=\"100%\"\n      y1={`${y}%`}\n      y2={`${y}%`}\n    />\n  )\n}\n\nconst fretLineBounds = (nrOfStrings: number) => ({\n  top: stringCenter(nrOfStrings)(0),\n  bottom: stringCenter(nrOfStrings)(nrOfStrings - 1),\n})\nconst fretLine = (nrOfFrets: number, nrOfStrings: number) => (frt: any) => {\n  const { top, bottom } = fretLineBounds(nrOfStrings)\n  const x = (100 / nrOfFrets) * frt\n\n  return (\n    <line\n      className={cx(`fret fret-${frt}`)}\n      key={`fret-${frt}`}\n      x1={`${x}%`}\n      x2={`${x}%`}\n      y1={`${top}%`}\n      y2={`${bottom}%`}\n    />\n  )\n}\n\ninterface Props {\n  nrOfStrings: number\n  nrOfFrets: number\n}\n\nconst BoardString: FC<Props> = ({ nrOfStrings, nrOfFrets }) => (\n  <g>\n    {times(stringLine(nrOfStrings), nrOfStrings)}\n    {range(1, nrOfFrets).map(fretLine(nrOfFrets, nrOfStrings))}\n  </g>\n)\n\nexport default BoardString\n","import React, { ReactElement } from 'react'\nimport { TuningShape } from 'interfaces/tuning'\nimport BoardPosition from './BoardPosition'\nimport BoardGraphicStrings from './BoardString'\nimport { TonalKey } from 'interfaces/tonal'\n\ninterface Props {\n  noOfStrings: number\n  noOfFrets: number\n  boardHeight: number\n  tuning: TuningShape[]\n  showOctave: boolean\n  tonalKey?: TonalKey\n}\n\nexport default ({\n  noOfStrings,\n  noOfFrets,\n  boardHeight,\n  tuning,\n  showOctave,\n  tonalKey,\n}: Props): ReactElement => {\n  return (\n    <>\n      <BoardGraphicStrings nrOfStrings={noOfStrings} nrOfFrets={noOfFrets} />\n      <BoardPosition\n        {...{ boardHeight, noOfStrings, tuning, showOctave, tonalKey }}\n      />\n    </>\n  )\n}\n","import React, { FC } from 'react'\nimport { TuningShape } from 'interfaces/tuning'\nimport ViewPort from './ViewPort'\nimport StringTuningWrapper from './StringTuningWrapper'\nimport NutGraphicStrings from './NutGraphicString'\nimport SvgWrapper from './SvgWrapper'\nimport Board from './Board'\nimport { TonalKey } from 'interfaces/tonal'\n\ninterface Props {\n  noOfStrings: number\n  noOfFrets: number\n  boardHeight: number\n  tuning: TuningShape[]\n  showOctave: boolean\n  tonalKey?: TonalKey\n}\n\nconst FretBoard: FC<Props> = ({\n  boardHeight,\n  tuning,\n  noOfStrings,\n  noOfFrets,\n  showOctave,\n  tonalKey,\n}) => (\n  <div className=\"board\" style={{ height: `${boardHeight}px` }}>\n    <SvgWrapper>\n      <ViewPort width={3} offset={0}>\n        <StringTuningWrapper tuning={tuning} boardHeight={boardHeight} />\n      </ViewPort>\n      <ViewPort width={0.75} offset={3}>\n        <NutGraphicStrings nrOfStrings={noOfStrings} />\n      </ViewPort>\n      <ViewPort width={95} offset={3.75}>\n        <Board\n          {...{\n            boardHeight,\n            tuning,\n            noOfStrings,\n            noOfFrets,\n            showOctave,\n            tonalKey,\n          }}\n        />\n      </ViewPort>\n    </SvgWrapper>\n  </div>\n)\n\nexport default FretBoard\n","import styled from 'styled-components'\n\nconst PageContainer = styled.div`\n  margin-top: 50px;\n  background-color: white;\n`\n\nexport { PageContainer }\n","export enum fretboardHeight {\n  small = 20,\n  medium = 25,\n  large = 30,\n  xlarge = 40,\n}\n","import { AlternateTuningProps, musicNotes } from 'interfaces/tuning'\n\nexport const alternateTunings: AlternateTuningProps = {\n  standard: {\n    name: 'Standard',\n    tunings: [\n      { note: musicNotes.E, octave: 2 },\n      { note: musicNotes.A, octave: 2 },\n      { note: musicNotes.D, octave: 3 },\n      { note: musicNotes.G, octave: 3 },\n      { note: musicNotes.B, octave: 4 },\n      { note: musicNotes.E, octave: 4 },\n    ],\n  },\n  dadgad: {\n    name: 'DADGAD',\n    tunings: [\n      { note: musicNotes.D, octave: 2 },\n      { note: musicNotes.A, octave: 2 },\n      { note: musicNotes.D, octave: 3 },\n      { note: musicNotes.G, octave: 3 },\n      { note: musicNotes.A, octave: 4 },\n      { note: musicNotes.D, octave: 4 },\n    ],\n  },\n  openC: {\n    name: 'Open C',\n    tunings: [\n      { note: musicNotes.C, octave: 2 },\n      { note: musicNotes.G, octave: 2 },\n      { note: musicNotes.C, octave: 3 },\n      { note: musicNotes.G, octave: 3 },\n      { note: musicNotes.C, octave: 4 },\n      { note: musicNotes.E, octave: 4 },\n    ],\n  },\n  openD: {\n    name: 'Open D',\n    tunings: [\n      { note: musicNotes.D, octave: 2 },\n      { note: musicNotes.A, octave: 2 },\n      { note: musicNotes.D, octave: 3 },\n      { note: musicNotes.F, octave: 3, sharp: true },\n      { note: musicNotes.A, octave: 4 },\n      { note: musicNotes.D, octave: 4 },\n    ],\n  },\n}\n","import { notesArray } from 'interfaces/tuning'\n\nexport const convertTonalScaleIfNeeded = (scale: any) => {\n  if (scale) {\n    const convertedScale = scale.map((note: string) => {\n      // when no conversion needed\n      if (notesArray.includes(note)) return note\n\n      // when conversion is needed\n      const splitArray = note.split('')\n      let firstNoteIndex: number | undefined\n      if (splitArray.length === 2) {\n        firstNoteIndex = notesArray.indexOf(splitArray[0])\n      } else if (splitArray.length === 3) {\n        firstNoteIndex = notesArray.indexOf(splitArray.splice(0, 2).join(''))\n      }\n\n      if (firstNoteIndex) {\n        const searchIndex = (firstNoteIndex + 1) % notesArray.length\n        return notesArray[searchIndex]\n      }\n      return null\n    })\n    return convertedScale\n  }\n}\n","import { Key } from '@tonaljs/tonal'\nimport { alternateTunings } from 'data/alternateTunings'\nimport { AlternateTuningProps, notesArray } from 'interfaces/tuning'\nimport React, { FC } from 'react'\nimport Select from 'react-select'\nimport styled from 'styled-components'\nimport { convertTonalScaleIfNeeded } from 'modules/tonalHelper'\n\nconst Container = styled.div`\n  margin-bottom: 1rem;\n  display: flex;\n  > .select {\n    width: 100%;\n  }\n`\n\ninterface Props {\n  setTuning: (e: any) => void\n  setKey: (e: any) => void\n}\n\nconst generateOptions = (tuningOptions: AlternateTuningProps) => {\n  return Object.keys(tuningOptions).map(key => {\n    return { value: key, label: tuningOptions[key].name }\n  })\n}\n\nconst onTuningChange = (e: any, setTuning: any) => {\n  setTuning(alternateTunings[e.value])\n}\n\nconst PageHeader: FC<Props> = ({ setTuning, setKey }) => {\n  const tuningOptions = generateOptions(alternateTunings)\n  const musicKey = notesArray.map((note: string) => {\n    return { value: note, label: note.toUpperCase() }\n  })\n\n  const onKeyChange = (e: any, setKey: any) => {\n    const tonalKey = Key.majorKey(e.value)\n    setKey({\n      ...tonalKey,\n      convertedScale: convertTonalScaleIfNeeded(tonalKey.scale),\n    })\n  }\n\n  return (\n    <Container>\n      <Select\n        options={tuningOptions}\n        onChange={e => onTuningChange(e, setTuning)}\n        defaultValue={tuningOptions[0]}\n        className=\"select\"\n      />\n      <Select\n        options={musicKey}\n        onChange={e => onKeyChange(e, setKey)}\n        className=\"select\"\n      />\n    </Container>\n  )\n}\n\nexport default PageHeader\n","import React, { FC, useState } from 'react'\nimport Fretboard from 'components/Fretboard/FretBoard'\nimport { PageContainer } from 'components/Container'\nimport { fretboardHeight } from 'interfaces/enums'\nimport { alternateTunings } from 'data/alternateTunings'\nimport PageHeader from './PageHeader'\nimport { isEmpty } from 'ramda'\nimport { TonalKey } from 'interfaces/tonal'\nimport styled from 'styled-components'\n\nconst NO_OF_FRETS = 15\nconst NO_OF_STRINGS = 6\n\nconst boardHeight = NO_OF_STRINGS * fretboardHeight.large\nconst showOctave = false\n\nconst ScalesDisplay = styled.div`\n  padding: 1rem 0;\n  span {\n    padding: 0 0.5rem;\n  }\n`\n\nconst FretboardPage: FC = () => {\n  const [tuning, setTuning] = useState(alternateTunings.standard)\n  const [tonalKey, setTonalKey] = useState<TonalKey>({})\n\n  const decorateScaleNotes = () => {\n    if (tonalKey?.convertedScale) {\n      return tonalKey.convertedScale.map((item: string) => (\n        <span key={item}>{item}</span>\n      ))\n    }\n    return null\n  }\n\n  return (\n    <PageContainer className=\"container container-lg container-xl\">\n      <PageHeader setTuning={setTuning} setKey={setTonalKey} />\n      {!isEmpty(tonalKey) && (\n        <ScalesDisplay>\n          Notes on scale are: {decorateScaleNotes()}\n        </ScalesDisplay>\n      )}\n      <Fretboard\n        boardHeight={boardHeight}\n        noOfStrings={NO_OF_STRINGS}\n        noOfFrets={NO_OF_FRETS}\n        tuning={tuning.tunings}\n        showOctave={showOctave}\n        tonalKey={tonalKey}\n      />\n    </PageContainer>\n  )\n}\n\nexport default FretboardPage\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Header from './components/Header'\nimport FretboardPage from './pages/FretboardPage'\nimport HomePage from './pages/HomePage'\n\nconst App = () => {\n  return (\n    <div className=\"paper\">\n      <Router>\n        <Header />\n\n        <Switch>\n          <Route path=\"/chordee-typescript/\">\n            <FretboardPage />\n          </Route>\n          <Route path=\"/fretboard\">\n            <FretboardPage />\n          </Route>\n          {/* <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route> */}\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}